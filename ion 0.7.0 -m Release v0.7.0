[33mcommit b273caa252b7ee1b772fd50f6bee47b7d9ac9758[m[33m ([m[1;36mHEAD -> [m[1;32mmain[m[33m, [m[1;31morigin/main[m[33m)[m
Author: Manoj Dhami <mdhami7@myseneca.ca>
Date:   Sun Jul 7 11:03:06 2024 -0400

    Added cd.yml

[1mdiff --git a/.github/workflows/cd.yml b/.github/workflows/cd.yml[m
[1mnew file mode 100644[m
[1mindex 0000000..a8b8601[m
[1m--- /dev/null[m
[1m+++ b/.github/workflows/cd.yml[m
[36m@@ -0,0 +1,69 @@[m
[32m+[m[32m# Continuous Delivery Workflow[m
[32m+[m[32m#[m
[32m+[m[32m# This should happen whenever we push a new tag, and we tag an existing[m
[32m+[m[32m# commit after we know it's good (e.g., has been tested).[m
[32m+[m[32m#[m
[32m+[m[32m# To create a new tag, we also need to update the package.json version:[m
[32m+[m[32m#[m
[32m+[m[32m# $ npm version 0.5.0[m
[32m+[m[32m#[m
[32m+[m[32m# This will update `version` in package.json to `0.5.0` and create a new[m
[32m+[m[32m# tag, `v0.5.0` in git. We'll then use this tag (i.e., `v0.5.0`) to tag[m
[32m+[m[32m# our docker image before we push to AWS.[m
[32m+[m[32mname: cd[m
[32m+[m
[32m+[m[32mon:[m
[32m+[m[32m  push:[m
[32m+[m[32m    # Whenever a new tag is pushed[m
[32m+[m[32m    tags:[m
[32m+[m[32m      # Any tag starting with v... should trigger this workflow.[m
[32m+[m[32m      - "v**"[m
[32m+[m
[32m+[m[32mjobs:[m
[32m+[m[32m  # NOTE: this assumes our CI jobs have already passed previously[m
[32m+[m[32m  # (i.e., that we don't tag a commit manually until we know a build is working)[m
[32m+[m[32m  aws:[m
[32m+[m[32m    name: AWS[m
[32m+[m[32m    runs-on: ubuntu-latest[m
[32m+[m[32m    steps:[m
[32m+[m[32m      - name: Check out code[m
[32m+[m[32m        uses: actions/checkout@v4[m
[32m+[m[32m      # Use buildx, which is faster and can optimize the build steps[m
[32m+[m[32m      - name: Set up Docker Buildx[m
[32m+[m[32m        uses: docker/setup-buildx-action@v2[m
[32m+[m[32m      # NOTE: ending and restarting the Learner Lab will void these secrets,[m
[32m+[m[32m      # update them if you are doing this during a new session:[m
[32m+[m[32m      # `Error: The security token included in the request is expired`[m
[32m+[m[32m      - name: Configure AWS Credentials using Secrets[m
[32m+[m[32m        uses: aws-actions/configure-aws-credentials@v4[m
[32m+[m[32m        with:[m
[32m+[m[32m          # Use our GitHub Encrypted Secrets via secrets.*[m
[32m+[m[32m          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}[m
[32m+[m[32m          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}[m
[32m+[m[32m          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}[m
[32m+[m[32m          # Hard-code our region, which isn't a secret, and won't change[m
[32m+[m[32m          aws-region: us-east-1[m
[32m+[m
[32m+[m[32m      # Login to our ECR repository using the configured credentials[m
[32m+[m[32m      - name: Login to Amazon ECR[m
[32m+[m[32m        id: login-ecr[m
[32m+[m[32m        uses: aws-actions/amazon-ecr-login@v2[m
[32m+[m
[32m+[m[32m      # Build and Push an Image to Amazon ECR[m
[32m+[m[32m      - name: Build and push to Amazon ECR[m
[32m+[m[32m        env:[m
[32m+[m[32m          # Define an Environment Variable with our ECR Registry, getting[m
[32m+[m[32m          # the value from the previous step's outputs[m
[32m+[m[32m          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}[m
[32m+[m[32m          # Define an Environment Variable with our ECR Repository Name[m
[32m+[m[32m          ECR_REPO: fragments[m
[32m+[m[32m          # We'll give this image two different tags. First, we'll use the git tag (vX.Y.Z)[m
[32m+[m[32m          # so that we can always go back and re-create this setup again in the future[m
[32m+[m[32m          # if we have to test or debug something. Second, we'll also replace the[m
[32m+[m[32m          # `latest` tag, since this is our most up-to-date version.[m
[32m+[m[32m          VERSION_TAG: ${{ github.ref_name }}[m
[32m+[m[32m        uses: docker/build-push-action@v4[m
[32m+[m[32m        with:[m
[32m+[m[32m          push: true[m
[32m+[m[32m          # Use the git tag version and `latest`[m
[32m+[m[32m          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}, ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest[m
